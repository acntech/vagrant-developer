#!/bin/bash

SCRIPT="$0"
SCRIPT_DIR="$(dirname ${SCRIPT})"

MODULE_ROOT_DIR="/opt"
MODULE_ICON_ROOT_DIR="/usr/share/applications"
MODULE_EXECUTABLE_ROOT_DIR="/usr/bin"
MODULE_PROFILE_ROOT_DIR="/etc/profile.d"
MODULE_APT_REPO_LIST_DIR="/etc/apt/sources.list.d"
MODULE_TEMP_DIR="/tmp"
MODULE_DEFAULT_SYMLINK="default"

#
# Function for adding APT key
#
function add_apt_key() {
    local url="$1"

    if [ -z "${url}" ]; then
        echo "No APT key URL specified"
        exit 1
    fi

    curl -fsSL "${url}" | apt-key add -
}


#
# Function for adding APT repository
#
function add_apt_repo() {
    local module="$1"
    local repo="$2"

    local repo_list="${MODULE_APT_REPO_LIST_DIR}/${module}.list"

    if [ -z "${module}" ]; then
        echo "No module specified"
        exit 1
    fi

    if [ -z "${repo}" ]; then
        echo "No APT repository specified"
        exit 1
    fi

    if [ -f "${repo_list}" ]; then
        echo "APT repository already exists"
    else
        echo "${repo}" > "${repo_list}"
        apt update
    fi
}


#
# Function for updating APT packages
#
function update_apt() {
    apt update
    apt -y -o Dpkg::Options::="--force-confdef" upgrade
    apt -y dist-upgrade
}


#
# Function for installing en APT package
#
function install_apt() {
    local package="$1"

    if [ -z "${package}" ]; then
        echo "No package specified"
        exit 1
    fi

    dpkg -l | grep "${package}" > /dev/null
    if [ $? ]; then
        echo "Package ${package} is already installed"
    else
        apt -y install "${package}"
    fi
}


#
# Function for clearing APT cache
#
function clear_apt() {
    apt -y autoremove
    apt -y autoclean
    apt -y clean
    rm -rf /var/lib/apt/lists/*
}


#
# Function for clearing disk
#
function clear_disk() {
    dd if=/dev/zero of=/EMPTY bs=1M
    rm -f /EMPTY
}


#
# Function for clearing BASH history
#
function clear_history() {
    cat /dev/null > ~/.bash_history
    history -c
}


#
# Function that is run in the start of provisioning
#
function initialize() {
    echo ""
    echo " ############################################"
    echo " #"
    echo " #  Initialize provisioning..."
    echo " #"
    echo " ############################################"
    echo ""

    update_apt
}


#
# Function that is run in the end of provisioning
#
function finalize() {
    echo ""
    echo " ############################################"
    echo " #"
    echo " #  Finalize provisioning..."
    echo " #"
    echo " ############################################"
    echo ""

    clear_apt
    clear_disk
    clear_history
}


#
# Function for running the install script for a module
#
function install_module() {
    local module="$1"

    echo ""
    echo " ############################################"
    echo " #"
    echo " #  Installing module ${module}"
    echo " #"
    echo " ############################################"
    echo ""

    if [ -z "${module}" ]; then
        echo "No install candidate specified"
        exit 1
    fi

    if [ ! -f "${SCRIPT_DIR}/${module}/install.sh" ]; then
        echo "Install candidate ${module} not valid"
        exit 1
    fi

    bash "${SCRIPT_DIR}/${module}/install.sh"
}


#
# Function for installing a module from an archive
#
function install_external_module() {
    local module="$1"
    local module_install_dir="$2"

    local module_dir="${MODULE_ROOT_DIR}/${module}"
    local module_install_path="${module_dir}/${module_install_dir}"
    local module_symlink_path="${module_dir}/${MODULE_DEFAULT_SYMLINK}"
    local module_tar_archive="${MODULE_TEMP_DIR}/${module}.tar.gz"
    local module_zip_archive="${MODULE_TEMP_DIR}/${module}.zip"
    local current_dir="$(pwd)"

    if [ -z "${module}" ]; then
        echo "No module specified"
        exit 1
    fi

    if [ -z "${module_install_dir}" ]; then
        echo "No module install directory specified"
        exit 1
    fi

    if [ ! -d "${module_dir}" ]; then
        echo "Directory for module ${module} does not exist, creating it"
        mkdir "${module_dir}"
    else
        echo "Directory for module ${module} exists, continuing..."
    fi

    if [ -d "${module_install_path}" ]; then
        echo "Install directory for module ${module} already exists, exiting"
        exit 0
    fi

    if [ -f "${module_symlink_path}" ]; then
        echo "Removing default symbolic link for existing module ${module}"
        rm "${module_symlink_path}"
    fi

    if [ -f "${module_tar_archive}" ]; then
        tar -xzf "${module_tar_archive}" -C "${module_dir}/"
    elif [ -f "${module_zip_archive}" ]; then
        unzip "${module_zip_archive}" -d "${module_dir}/"
    else
        echo "No archive found for module ${module} in ${MODULE_TEMP_DIR}"
        exit 1
    fi

    if [ ! -d "${module_install_path}" ]; then
        echo "No install directory found for module ${module} after extracting archive"
        exit 1
    fi

    cd "${module_dir}"
    ln -s "${module_install_dir}" "${MODULE_DEFAULT_SYMLINK}"
    cd "${current_dir}"
}


#
# Function for installing a module icon
#
function install_module_icon() {
    local module="$1"
    local module_icon_dir="$2"
}


#
# Function for installing a module executable as a system command
#
function install_module_executable() {
    local module="$1"
    local executable="$2"

    local executable_system_path="${MODULE_EXECUTABLE_ROOT_DIR}/${executable}"
    local executable_module_path="${MODULE_ROOT_DIR}/${module}/${MODULE_DEFAULT_SYMLINK}/bin/${executable}"

    if [ -z "${module}" ]; then
        echo "No module specified"
        exit 1
    fi

    if [ -z "${executable}" ]; then
        echo "No executable specified"
        exit 1
    fi

    if [ ! -f "${executable_module_path}" ]; then
        echo "Path for executable ${executable} does not exist for module  ${module}"
        exit 1
    fi

    update-alternatives --install "${executable_system_path}" "${executable}" "${executable_module_path}" 1
    update-alternatives --set "${executable}" "${executable_module_path}"
}


#
# Function for installing a module profile that set environment variables
#
function install_module_profile() {
    local module="$1"
    local environment_variable="$2"

    local module_path="${MODULE_ROOT_DIR}/${module}/${MODULE_DEFAULT_SYMLINK}"
    local module_profile_path="${MODULE_PROFILE_ROOT_DIR}/${module}.sh"

    if [ -z "${module}" ]; then
        echo "No module specified"
        exit 1
    fi

    if [ -z "${environment_variables}" ]; then
        echo "No executable specified"
        exit 1
    fi

    echo -e "#!/bin/bash\n\nexport ${environment_variable}=${module_path}\nexport PATH=\${PATH}:\${${environment_variable}}/bin\n" > "${module_profile_path}"
}


#
# Function for downloading a module archive
#
function download_module_archive() {
    local module_archive="$1"
    local module_archive_download_url="$2"
    local module_download_header="$3"

    local module_archive_path="${MODULE_TEMP_DIR}/${module_archive}"

    if [ -z "${module_archive}" ]; then
        echo "No module archive specified"
        exit 1
    fi

    if [ -z "${module_archive_download_url}" ]; then
        echo "No module archive download URL specified"
        exit 1
    fi

    echo "Downloading module archive"
    local success=0
    if [ -z "${module_download_header}" ]; then
        wget --quiet --no-cookies --no-check-certificate "${module_archive_download_url}" -O "${module_archive_path}"
        success=$?
    else
        wget --quiet --no-check-certificate --header="${module_download_header}" "${module_archive_download_url}" -O "${module_archive_path}"
        success=$?
    fi

    if [ "${success}" != 0 ]; then
        echo "Error occurred when downloading module archive"
        exit 1
    fi
}
